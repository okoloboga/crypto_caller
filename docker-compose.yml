version: '3.8'

services:
  # Сервис для backend
  backend:
    build: ./backend
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_AUTH_TEST_TOKEN: ${TWILIO_AUTH_TEST_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      OKX_API_KEY: ${OKX_API_KEY}
      OKX_API_SECRET: ${OKX_API_SECRET}
      OKX_API_PASSPHRASE: ${OKX_API_PASSPHRASE}
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - default  # Добавьте подключение к сети

  # Сервис для Postgres
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - default

  # Сервис для Redis
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - default
  
  bot:
    build: ./bot
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
    networks:
      - default
    restart: always

  # Сервис для Nginx
  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - default
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - frontend_build:/usr/share/nginx/html  # Копируем собранный фронтенд в Nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./frontend/public:/usr/share/nginx/html:ro
    command: ["nginx", "-g", "daemon off;"]

volumes:
  postgres_data:
  frontend_build:  # Новый volume для фронтенда
    driver: local

networks:
  default:
    driver: bridge  # Используем общую сеть
