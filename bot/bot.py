import logging
import os
import requests

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, CallbackQuery, FSInputFile
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from dotenv import load_dotenv
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
ADMIN_ID = os.getenv("ADMIN_ID")
STATS_ID = os.getenv("STATS_IDS")

# –ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ Telegram Web App
WEB_APP_URL = os.getenv("WEB_APP_URL")
TICKET_ROUTE = os.getenv("TICKET_ROUTE")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=BOT_TOKEN, default=bot_properties)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_feedback_state = {}

'''REQUESTS'''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
def create_ticket(message):

    user_id = message.from_user.id

    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¢–∏–∫–µ—Ç–∞. user_id: {user_id}, message: {message.text}")

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    data = {
        "userId": user_id,
        "message": message.text
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
    response = requests.post(TICKET_ROUTE, json=data)

    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {response}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if response.status_code == 201:
        message.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
    elif response.status_code == 409:
        message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.")
    else:
        message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
def delete_ticket(user_ticket_id, message):

    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –¢–∏–∫–µ—Ç–∞. user_id: {user_ticket_id}")

    data = {
        "userId": user_ticket_id,
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞ DELETE-–∑–∞–ø—Ä–æ—Å–∞
    response = requests.delete(TICKET_ROUTE, json=data)
                               
    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {response}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if response.status_code == 200:
        message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    elif response.status_code == 404:
        message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
    else:
        message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="RUBLE CALLER", web_app=WebAppInfo(url=WEB_APP_URL))
            ],
            [
                InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="leave_feedback")
            ]
        ]
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):

    photo = FSInputFile("main.jpg")
    caption_text = "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å RUBLE CALLER –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer_photo(
        photo,
        caption=caption_text,
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@dp.callback_query(F.data == "leave_feedback")
async def ask_for_feedback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_feedback_state[user_id] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    cancel_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–ê–ó–ê–î", callback_data="cancel_feedback")]
        ]
    )

    await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–æ–≤–∞\n\nticket\n\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–ê–ó–ê–î' –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=cancel_keyboard)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–ê–ó–ê–î"
@dp.callback_query(F.data == "cancel_feedback")
async def cancel_feedback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞
    user_feedback_state.pop(user_id, None)

    await bot.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–∑—ã–≤—ã)
@dp.message(F.text.startswith("ticket"))
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—Ç–∞–≤–∏–ª –¢–∏–∫–µ—Ç: {message.text}")

    if user_id in user_feedback_state and user_feedback_state[user_id]:

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
        answer_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_feedback_{user_id}")]
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É
        feedback_text = f"–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç #{user_id}:\n\n{message.text}"
        await bot.send_message(ADMIN_ID, feedback_text, reply_markup=answer_keyboard)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        await message.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!", reply_markup=get_main_menu())
        create_ticket(message)

        # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        user_feedback_state.pop(user_id, None)
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Web App –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
@dp.callback_query(F.data[:16] == "answer_feedback_")
async def ticket_answer(callback_query: CallbackQuery):

    logger.info(f"–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ {callback_query.data}")

    user_ticket_id = callback_query.data[16:]

    await callback_query.message.answer(f"–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞—á–∏–Ω–∞—è —Å —Ñ—Ä–∞–∑—ã:")
    await callback_query.message.answer(f"answer_{user_ticket_id}")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∞–¥–º–∏–Ω–∞
@dp.message(F.text.startswith("answer_"))
async def ticket_answer_process(message: types.Message):

    logger.info(f"–û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∞–¥–º–∏–Ω–∞ {message.text}")

    user_ticket_id = message.text[7:message.text.find(" ")]
    answer_text = message.text[message.text.find(" "):]

    await bot.send_message(user_ticket_id, f"–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {answer_text}")
    delete_ticket(user_ticket_id, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):

    await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ —Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ... –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –Ω–∞–∂–º–∏—Ç–µ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–æ–≤–∞\n\nticket")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
